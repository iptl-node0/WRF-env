Taken from https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compilation_tutorial.php on August 1, 2025.
Note that depending on mpicc settings, one output may be generated for each core from the last test.


###  System Environment Tests


    First and foremost, it is very important to have a gfortran compiler, as well as gcc and cpp. To test whether these exist on the system, type the following:

            which gfortran
            which cpp
            which gcc

    If you have these installed, you should be given a path for the location of each.

    We recommend using a Fortran compiler that supports Fortran2003 standard (version 4.6 or later - although, we recommend using V9+, as there are sometimes issues with the newer WRF code and older versions of GNU). To determine the version of gfortran you have, type:

        gcc --version 


    Create a new, clean directory called Build_WRF, and another one called TESTS.


    There are a few simple tests that can be run to verify that the fortran compiler is built properly, and that it is compatible with the C compiler.
    NOTE: If any of these tests fail, you will need to contact the systems administrator at your institution for help, as these are specific to your particular environment, and we do not have the resources to support these types of errors.

    Below is a tar file that contains the tests. Download the tar file and place it in the TESTS directory.

        Fortran and C Tests Tar File 

    To unpack the tar file, type:

        tar -xf Fortran_C_tests.tar 

    There are 7 tests available, so start at the top and run through them, one at a time.

        Test #1: Fixed Format Fortran Test: TEST_1_fortran_only_fixed.f

        Type the following in the command line:

            gfortran TEST_1_fortran_only_fixed.f

        Now type:

            ./a.out

        The following should print out to the screen:

            SUCCESS test 1 fortran only fixed format



        Test #2: Free Format Fortran: TEST_2_fortran_only_free.f90

        Type the following in the command line:

            gfortran TEST_2_fortran_only_free.f90

        and then type:

            ./a.out

        The following should print out to the screen:

            Assume Fortran 2003: has FLUSH, ALLOCATABLE, derived type, and ISO C Binding
            SUCCESS test 2 fortran only free format



        Test #3: C: TEST_3_c_only.c

        Type the following in the command line:

            gcc TEST_3_c_only.c

        and then type:

            ./a.out

        The following should print out to the screen:

            SUCCESS test 3 c only



        Test #4: Fortran Calling a C Function (our gcc and gfortran have different defaults, so we force both to always use 64 bit [-m64] when combining them): TEST_4_fortran+c_c.c, and TEST_4_fortran+x_f.f90

        Type the following in the command line:

            gcc -c -m64 TEST_4_fortran+c_c.c

        and then type:

            gfortran -c -m64 TEST_4_fortran+c_f.f90

        and then:

            gfortran -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o

        and then issue:

            ./a.out

        The following should print out to the screen:

            C function called by Fortran
            Values are xx = 2.00 and ii = 1
            SUCCESS test 4 fortran calling c


    In addition to the compilers required to manufacture the WRF executables, the WRF build system has scripts as the top level for the user interface. The WRF scripting system uses, and therefore having the following is necessary:

            csh
            perl
            sh

    To test whether these scripting languages are working properly on the system, there are 3 tests to run. These tests were included in the "Fortran and C Tests Tar File".

        Test #5:csh In the command line, type:

            ./TEST_csh.csh

        The result should be:

            SUCCESS csh test



        Test #6:perl In the command line, type:

            ./TEST_perl.pl

        The result should be:

            SUCCESS perl test



        Test #7:sh In the command line, type:

            ./TEST_sh.sh

        The result should be:

            SUCCESS sh test


    Finally, inside the scripts are quite a few UNIX commands that are available regardless of which shell is used. The following standard UNIX commands are mandatory:

        ar             head              sed
        awk          hostname      sleep
        cat            ln                  sort
        cd             ls                  tar
        cp             make            touch
        cut            mkdir            tr
        expr          mv                uname
        file             nm                wc
        grep          printf             which
        gzip           rm                   m4





###  Library Compatibility Tests

    Once the target machine is able to make small Fortran and C executables (what was verified in the System Environment Tests section), and after the NetCDF and MPI libraries are constructed (two of the libraries from the Building Libraries section), to emulate the WRF code's behavior, two additional small tests are required. We need to verify that the libraries are able to work with the compilers that are to be used for the WPS and WRF builds.
    NOTE: If any of these tests fail, you will need to contact the systems administrator at your institution for help, as these are specific to your particular environment, and we do not have the resources to support these types of errors.

    Below is a tar file that contans these tests. Download this tar file and place it in the TESTS directory, and then "cd" into the TESTS directory:

        Fortran_C_NETCDF_MPI_tests.tar

    To unpack the tar file, type:

        tar -xf Fortran_C_NETCDF_MPI_tests.tar

    There are 2 tests:

        Test #1: Fortran + C + NetCDF

        The NetCDF-only test requires the include file from the NETCDF package be in this directory. Copy the file here:

            cp ${NETCDF}/include/netcdf.inc .

        Compile the Fortran and C codes for the purpose of this test (the -c option says to not try to build an executable). Type the following commands:

            gfortran -c 01_fortran+c+netcdf_f.f
            gcc -c 01_fortran+c+netcdf_c.c
            gfortran 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o \
                 -L${NETCDF}/lib -lnetcdff -lnetcdf
            ./a.out

        The following should be displayed on your screen:

            C function called by Fortran
            Values are xx = 2.00 and ii = 1
            SUCCESS test 1 fortran + c + netcdf

        Test #2: Fortran + C + NetCDF + MPI

        The NetCDF+MPI test requires include files from both of these packages be in this directory, but the MPI scripts automatically make the mpif.h file available without assistance, so no need to copy that one. Copy the NetCDF include file here:

            cp ${NETCDF}/include/netcdf.inc .

        Note that the MPI executables mpif90 and mpicc are used below when compiling. Issue the following commands:

            mpif90 -c 02_fortran+c+netcdf+mpi_f.f
            mpicc -c 02_fortran+c+netcdf+mpi_c.c
            mpif90 02_fortran+c+netcdf+mpi_f.o \
            02_fortran+c+netcdf+mpi_c.o \
                 -L${NETCDF}/lib -lnetcdff -lnetcdf
            mpirun ./a.out

        The following should be displayed on your screen:

            C function called by Fortran
            Values are xx = 2.00 and ii = 1
            status = 2
            SUCCESS test 2 fortran + c + netcdf + mpi


